import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,b as s,d as e,e as n,f as t,r}from"./app.adc61bf5.js";const c={},p=s("p",null,[n("Never stop learning new things from great people. I personally met Dr. Eric C. Anderson at SISG in July 2023. He is a humble researcher and fun person to talk to. He also provided great resources for me to study "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"M"),s("msup",null,[s("mi",null,"C"),s("mn",null,"3")])]),s("annotation",{encoding:"application/x-tex"},"MC^3")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])])])])])])])])]),n(" through simulations and bioinformatics guidelanes.")],-1),d=t(`<p>Here are some notes reading his bioinformatics handbook <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><h2 id="unix-basics" tabindex="-1"><a class="header-anchor" href="#unix-basics" aria-hidden="true">#</a> Unix basics</h2><h3 id="the-simple-ones" tabindex="-1"><a class="header-anchor" href="#the-simple-ones" aria-hidden="true">#</a> The simple ones</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">pwd</span> <span class="token comment"># Print current working directory</span>
<span class="token function">ls</span>  <span class="token comment"># List all the files in the current directory</span>
<span class="token builtin class-name">cd</span> <span class="token environment constant">PATH</span>/TO/FOLDER   <span class="token comment"># Enter a folder</span>
<span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span> <span class="token comment"># Print enviroment variables</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> DIR_NAME   <span class="token comment"># Create a directory with all necessary parent directories</span>
<span class="token function">mv</span> WHERE_THE_FILE_FROM WHERE_THE_FILE_TO    <span class="token comment"># Move file from one location to another</span>
<span class="token function">cp</span> WHERE_THE_FILE_FROM WHERE_THE_FILE_TO    <span class="token comment"># Copy file from one location to another</span>
<span class="token function">rm</span> UNWANTED_FILE    <span class="token comment"># Remove a file</span>

<span class="token function">cat</span> A_FILE_YOU_WANT_TO_SEE

<span class="token builtin class-name">command</span> <span class="token operator">&lt;</span> <span class="token function">file</span>  <span class="token comment"># Send a data file into standard input for a utility</span>

<span class="token function">ls</span> <span class="token parameter variable">-s</span> WHERE_THE_FILE_FROM WHERE_THE_FILE_TO <span class="token comment"># Copy a symbolic link of one file to a difference location (shortcuts)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="additional-useful-ones" tabindex="-1"><a class="header-anchor" href="#additional-useful-ones" aria-hidden="true">#</a> Additional useful ones</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span>
<span class="token function">cat</span>
head, -n, <span class="token parameter variable">-c</span>
tail, <span class="token parameter variable">-n</span>
<span class="token function">less</span>
sort, <span class="token parameter variable">-n</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-k</span>
<span class="token function">paste</span>
cut, <span class="token parameter variable">-d</span>
tar, -cvf, <span class="token parameter variable">-xvf</span>
gzip, <span class="token parameter variable">-c</span>
du, <span class="token parameter variable">-h</span> -C,
<span class="token function">wc</span>
<span class="token function">date</span>
<span class="token function">uniq</span>
chmod, u+x, ug+x
<span class="token function">grep</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="an-example-script" tabindex="-1"><a class="header-anchor" href="#an-example-script" aria-hidden="true">#</a> An example script</h3><p><sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup> <code>clone-classroom-repos.sh</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># define a function to print the usage or &quot;help&quot; for the script</span>
<span class="token keyword">function</span> <span class="token function-name function">usage</span> <span class="token punctuation">{</span>
      <span class="token builtin class-name">echo</span> Syntax:
      <span class="token builtin class-name">echo</span> <span class="token string">&quot;  <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span>  GH_Prefix  Repo_Prefix  Branch  Dir
      
      GH_Prefix: the URL of the GitHub site where the repository exists.
      Repo_Prefix: the prefix of the name of each repository to be cloned.
      Branch: the name of the branch to create and switch to in the repository,
         once the repo has been cloned.
      Dir: path to the directory (will be created if necessary) to clone all
         the repositories to.
         
   Example:
   
      <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span>  https://github.com/CSU-con-gen-bioinformatics-2020  illumina-video-questions- erics-edits  /tmp/illumina-questions
      &quot;</span>
      <span class="token builtin class-name">echo</span>
<span class="token punctuation">}</span>

<span class="token comment">#  test for right number of required args.  If not, print usage message</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> <span class="token parameter variable">-ne</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    usage<span class="token punctuation">;</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">fi</span>

<span class="token comment"># copy positional parameters into other variables</span>
<span class="token assign-left variable">GHP</span><span class="token operator">=</span><span class="token variable">$1</span>
<span class="token assign-left variable">RP</span><span class="token operator">=</span><span class="token variable">$2</span>
<span class="token assign-left variable">BRANCH</span><span class="token operator">=</span><span class="token variable">$3</span>
<span class="token assign-left variable">DD</span><span class="token operator">=</span><span class="token variable">$4</span>

<span class="token comment"># assign string with student GitHub handles into a variable</span>
<span class="token assign-left variable">GHNAMES</span><span class="token operator">=</span><span class="token string">&quot;AmandaCicchino
BrennaF
CaitlinWells
EllenMCampbell
FayDong
LibbyGH
NathanPhipps
RGCheek
Ronan17
abeulke
carolazari
cbossu
ccolumbu
elenacorrea
eriqande
jenleon07
kimhoke
kruegg
lauracgoetz
mdrod110
mgdesaix
raven-wings
seamus100
taylorbobowski
wcfunk&quot;</span>

<span class="token comment"># assign my GitHub username to the variable USER</span>
<span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span>eriqande

<span class="token comment"># assign the current working directory to the variable RUNDIR</span>
<span class="token assign-left variable">RUNDIR</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>

<span class="token comment"># make a new directory named whatever the user wanted for the output directory</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$DD</span>

<span class="token comment"># make variables to hold log and error file names</span>
<span class="token assign-left variable">LOG</span><span class="token operator">=</span><span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/<span class="token variable">\${RP}</span>log
<span class="token assign-left variable">ERR</span><span class="token operator">=</span><span class="token variable">$LOG</span>.stderr

<span class="token comment"># print the date/time when the process is starting</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;STARTING at <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>&quot;</span>

<span class="token comment"># make a clean slate. remove any files with the name</span>
<span class="token comment"># of the error output file</span>
<span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$ERR</span>

<span class="token comment"># cycle over the student GitHub names, and for each one *do*</span>
<span class="token comment"># the commands that appear before the *done* keyword. Indenting</span>
<span class="token comment"># is used to make it easier to read, but is not essential.</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">L</span> <span class="token keyword">in</span> <span class="token variable">$GHNAMES</span><span class="token punctuation">;</span> <span class="token keyword">do</span>

    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Working on <span class="token variable">$L</span>, starting at <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>&quot;</span>  <span class="token comment"># print a progress line to stdout</span>
    <span class="token assign-left variable">REPO</span><span class="token operator">=</span><span class="token variable">$GHP</span>/<span class="token variable">\${RP}</span><span class="token variable">$L</span>     <span class="token comment"># combine variables into new variables that</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$REPO</span>            <span class="token comment"># hold the URL for the repository to be</span>
    <span class="token assign-left variable">DEST</span><span class="token operator">=</span><span class="token variable">$DD</span>/<span class="token variable">$L</span>           <span class="token comment"># cloned and the path where it should be cloned to</span>
  
    <span class="token comment"># store the commands themselves into variables. Note the </span>
    <span class="token comment"># use of double quotes.</span>
    <span class="token assign-left variable">CLONE_IT</span><span class="token operator">=</span><span class="token string">&quot;git clone <span class="token variable">\${REPO<span class="token operator">/</span>github.com<span class="token operator">/</span>$USER@github.com}</span> <span class="token variable">$DEST</span>&quot;</span> 
    <span class="token assign-left variable">BRANCH_IT</span><span class="token operator">=</span><span class="token string">&quot;git checkout -B <span class="token variable">$BRANCH</span>&quot;</span>
    <span class="token assign-left variable">PUSH_IT</span><span class="token operator">=</span><span class="token string">&quot;git push -u origin <span class="token variable">$BRANCH</span>&quot;</span>
  
    
    <span class="token comment"># now, run those commands, chained together by exit-status-AND</span>
    <span class="token comment"># operators (so it will stop if any one part fails), while</span>
    <span class="token comment"># all the while appending error statements to the Error file. Run it</span>
    <span class="token comment"># all within an &quot;if&quot; statement so you can deliver a report as to</span>
    <span class="token comment"># whether the whole shebang succeeded or failed.</span>
    <span class="token keyword">if</span> <span class="token variable">$CLONE_IT</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span> <span class="token variable">$ERR</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">cd</span> <span class="token variable">$DEST</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
        <span class="token variable">$BRANCH_IT</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span> <span class="token variable">$ERR</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
        <span class="token variable">$PUSH_IT</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span> <span class="token variable">$ERR</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">cd</span> <span class="token variable">$RUNDIR</span>   <span class="token comment"># at the very end make sure to return to the original working directory</span>
    <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;FULL SUCCESS <span class="token variable">$L</span>&quot;</span>
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;FAILURE SOMEWHERE WITHIN <span class="token variable">$L</span>&quot;</span>
        <span class="token builtin class-name">cd</span> <span class="token variable">$RUNDIR</span>  <span class="token comment"># get back to the working directory from which the original command was run.</span>
                    <span class="token comment"># so we are ready to handle the next student repo.</span>
    <span class="token keyword">fi</span>
  
<span class="token keyword">done</span>  <span class="token comment"># signifies the end of the for loop we are cycling over</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="other-essentials" tabindex="-1"><a class="header-anchor" href="#other-essentials" aria-hidden="true">#</a> Other essentials</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Loop:</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> dogs cats people<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;I like <span class="token variable">$i</span>&quot;</span>
<span class="token keyword">done</span>

<span class="token keyword">for</span> <span class="token for-or-select variable">fruit</span> <span class="token keyword">in</span> pears figs<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token keyword">for</span> <span class="token for-or-select variable">who</span> <span class="token keyword">in</span> Mark Alice<span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$who</span> likes <span class="token variable">$fruit</span>&quot;</span>
  <span class="token keyword">done</span>
<span class="token keyword">done</span>

<span class="token keyword">if</span> exit_status1<span class="token punctuation">;</span> <span class="token keyword">then</span>
  Do this <span class="token keyword">if</span> exit_status1 <span class="token operator">=</span> SUCCESS<span class="token operator">!</span>
<span class="token keyword">elif</span> exit_status2<span class="token punctuation">;</span> <span class="token keyword">then</span>
  Do this <span class="token keyword">if</span> exit_status1 <span class="token operator">=</span> NO_SUCCESS and exit_status2 <span class="token operator">=</span> SUCCESS<span class="token operator">!</span>
<span class="token keyword">else</span> 
  Do this <span class="token keyword">if</span> both were NO_SUCCESS
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Read files line by line</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># this is an example of reading a file in which each row is delimited</span>
<span class="token comment"># by whitespace, the second column is a file name and the the</span>
<span class="token comment"># third column is a number</span>
<span class="token function">cat</span> a_file <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span> 
  <span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$line</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token variable">\${A<span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span><span class="token punctuation">;</span> 
  <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token variable">\${A<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span><span class="token punctuation">;</span> 
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">awk, sed</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/orginal/replacement/g;&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Parameter: <code>-g</code>: globally rather than only the first match</p></div><h2 id="other-highlights" tabindex="-1"><a class="header-anchor" href="#other-highlights" aria-hidden="true">#</a> Other highlights</h2><ol><li><p>Connect to remove server</p></li><li><p>File transfer between local PC and remote server</p></li><li><p>Set up SSH config file for easily connect to remove server with its nickname. (Chapter 7.3.1)</p></li><li><p><code>tmux</code>: the terminal multiplexer (Chapter 7.4)</p></li><li><p><code>conda</code>: the environment manager</p></li><li><p>Download softwares on HPC such as <code>gatk</code></p></li><li><p><code>slurm</code>: Simple Linux Utility for Resource Management</p></li><li><p>Manage workflows with <code>Snakemake</code> - a Python-based framework to manage bioinformatics workflows. For example, Unix programming is using input-oriented, forward marching workflows that the workflow itself doesn\u2019t really know what it is trying to produce from those inputs until it has run all the way through and actually turned those inputs into outputs.</p><p>However, <code>Snakemake</code> is an output-oriented, backward-looking approach because its workflows are defined first and foremost in terms of the output files that are desired, along with instructions on how to create those output files from necessary input files and bioinformatic programs.</p><p>To learn <code>Snakemake</code>, check the documentation <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup> and the tutorial <sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>. Then check back on Chapter 14.</p></li></ol><h2 id="dna-basics" tabindex="-1"><a class="header-anchor" href="#dna-basics" aria-hidden="true">#</a> DNA Basics</h2>`,16),m=s("ol",null,[s("li",null,"DNA typically occurs as a double-helix of two complementary strands."),s("li",null,"There are four nucleotide bases: adenine (A), cytosine (C), guanine (G), and thymine (T)."),s("li",null,[n("DNA sequences is read from the 5' to the 3' end of the molecule because "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"5"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032")]),s("mo",null,"\u2192"),s("msup",null,[s("mn",null,"3"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032")])]),s("annotation",{encoding:"application/x-tex"},"5' \\rightarrow 3'")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7519em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7519em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"\u2032")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"\u2192"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7519em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"3"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7519em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"\u2032")])])])])])])])])])])]),n(" (forward strand) is the direction in which a new strand of DNA is synthesized during DNA replication. For example, for a sequence "),s("code",null,"5'--ACTCGACCT--3'"),n(", when it paired with its complement (A-T, C-G), it will look like:"),s("div",{class:"language-javascript ext-js line-numbers-mode"},[s("pre",{class:"language-javascript"},[s("code",null,[n(),s("span",{class:"token number"},"5"),s("span",{class:"token string"},"'--ACTCGACCT--3'"),n(`
     `),s("span",{class:"token operator"},"||"),s("span",{class:"token operator"},"||"),s("span",{class:"token operator"},"||"),s("span",{class:"token operator"},"||"),s("span",{class:"token operator"},"|"),n(`
 `),s("span",{class:"token number"},"3"),s("span",{class:"token string"},"'--TGAGCTGGA--5'"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])])]),s("li",null,"Regardless of which strand of DNA the original template comes from, sequences must be read off of it in a 5\u2019 to 3\u2019 direction (as that is how the biochemistry works).")],-1),u=t(`<h2 id="bioinformatics-file-formats" tabindex="-1"><a class="header-anchor" href="#bioinformatics-file-formats" aria-hidden="true">#</a> Bioinformatics file formats <sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></h2><p>The common types: <code>FASTA</code>, <code>FASTQ</code>, <code>SAM</code>, <code>BAM</code>, and <code>VCF</code>.</p><ol><li>Remember to index your <code>FASTA</code> files.</li><li><code>SAM</code> file has an entry starts with <code>@PG</code> that tells about the program that was used to produced the SAM file. <ul><li><code>ID</code>: software</li><li><code>VN</code>: version</li><li><code>CL</code>: complete command line For example:</li></ul></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>@<span class="token constant">PG</span>     <span class="token constant">ID</span><span class="token operator">:</span>bwa  <span class="token constant">PN</span><span class="token operator">:</span>bwa  <span class="token constant">VN</span><span class="token operator">:</span><span class="token number">0.7</span><span class="token number">.17</span><span class="token operator">-</span>r1188 <span class="token constant">CL</span><span class="token operator">:</span>bwa mem <span class="token operator">-</span><span class="token constant">R</span> @<span class="token constant">RG</span>\\tID<span class="token operator">:</span>s001_T199967_Lib<span class="token operator">-</span>1_HY75HDSX2_1_AAGACCGT<span class="token operator">+</span><span class="token constant">CAATCGAC</span>\\tSM<span class="token operator">:</span><span class="token constant">T199967</span>\\tPL<span class="token operator">:</span><span class="token constant">ILLUMINA</span>\\tL
<span class="token constant">B</span><span class="token operator">:</span>Lib<span class="token operator">-</span><span class="token number">1</span>\\tPU<span class="token operator">:</span><span class="token constant">HY75HDSX2</span><span class="token number">.1</span><span class="token punctuation">.</span><span class="token constant">AAGACCGT</span><span class="token operator">+</span><span class="token constant">CAATCGAC</span> resources<span class="token operator">/</span>genome<span class="token punctuation">.</span>fasta results<span class="token operator">/</span>trimmed<span class="token operator">/</span>s001<span class="token operator">--</span><span class="token operator">-</span>1_R1<span class="token punctuation">.</span>fq<span class="token punctuation">.</span>gz results<span class="token operator">/</span>trimmed<span class="token operator">/</span>s001<span class="token operator">--</span><span class="token operator">-</span>1_R2<span class="token punctuation">.</span>fq<span class="token punctuation">.</span>gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CIGAR</strong> column in a <code>SAM</code> file denotes the position and length of the insertion. 3. <code>BAM</code> (Binary Alignment Map) file is a compressed binary ot <code>SAM</code> file. 4. I really wish I read all these when I first seeing <code>VCF</code> <sup class="footnote-ref"><a href="#footnote4">[4:1]</a><a class="footnote-anchor" id="footnote-ref4:1"></a></sup>.</p><ul><li><code>vcflib vcf2fasta</code> takes a phased VCF file and a fasta file and spits out sequence.</li></ul><div class="custom-container warning"><p class="custom-container-title">In progress...</p><p>Continue with 19.4.1.5</p></div><h2 id="steps-in-a-typical-analysis" tabindex="-1"><a class="header-anchor" href="#steps-in-a-typical-analysis" aria-hidden="true">#</a> Steps in a typical analysis:</h2><ol start="0"><li>Preparation: <ul><li>Download reference genome from NCBI</li><li>Use <code>samtools faidx</code> to create index of <code>reference_genome.fasta</code></li></ul></li><li>Alignment: align reads from a sequencing machine to a reference genome.</li><li>Variant calling: use tools to identify genetic variation and the genotypes of individuals at different location in the genome.</li><li>Analysis</li></ol><h3 id="highlights" tabindex="-1"><a class="header-anchor" href="#highlights" aria-hidden="true">#</a> Highlights:</h3><ol><li>The \u201Cpaired-end\u201D sequencing: the sequences come in pairs from different ends of the same fragment.</li></ol><h2 id="remarks" tabindex="-1"><a class="header-anchor" href="#remarks" aria-hidden="true">#</a> Remarks:</h2><ol><li>Doing bioinformatics, you will find that there will be failures of various programs. It is essential to store pipeline logs then debug.</li><li>Pro tip on notebooks: First, number your notebooks and have outputs and intermediates directories associated with them. And second, always save the R object that is a ggplot in the outputs so that if you want to tweak it without re-generating all the underlying data, you can do that easily.</li></ol><h2 id="other-resources" tabindex="-1"><a class="header-anchor" href="#other-resources" aria-hidden="true">#</a> Other resources:</h2>`,14),v=n("Bash tutorial: "),h={href:"https://ryanstutorials.net/bash-scripting-tutorial/",target:"_blank",rel:"noopener noreferrer"},k=n("https://ryanstutorials.net/bash-scripting-tutorial/"),b=n("A video about how Illumina sequencing work: "),f={href:"https://eriqande.github.io/erics-captioned-vids/vids/illumina-sbs/",target:"_blank",rel:"noopener noreferrer"},g=n("https://eriqande.github.io/erics-captioned-vids/vids/illumina-sbs/"),_=s("hr",{class:"footnotes-sep"},null,-1),w={class:"footnotes"},y={class:"footnotes-list"},x={id:"footnote1",class:"footnote-item"},A={href:"https://eriqande.github.io/eca-bioinf-handbook/",target:"_blank",rel:"noopener noreferrer"},E=n("https://eriqande.github.io/eca-bioinf-handbook/"),C=n(),R=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"\u21A9\uFE0E",-1),S=n(),T=s("a",{href:"#footnote-ref1:1",class:"footnote-backref"},"\u21A9\uFE0E",-1),q={id:"footnote2",class:"footnote-item"},$={href:"https://snakemake.readthedocs.io/en/stable/",target:"_blank",rel:"noopener noreferrer"},H=n("https://snakemake.readthedocs.io/en/stable/"),I=n(". "),D=s("a",{href:"#footnote-ref2",class:"footnote-backref"},"\u21A9\uFE0E",-1),L={id:"footnote3",class:"footnote-item"},N={href:"https://snakemake.readthedocs.io/en/stable/tutorial/tutorial.html",target:"_blank",rel:"noopener noreferrer"},G=n("https://snakemake.readthedocs.io/en/stable/tutorial/tutorial.html"),P=n(),M=s("a",{href:"#footnote-ref3",class:"footnote-backref"},"\u21A9\uFE0E",-1),F={id:"footnote4",class:"footnote-item"},U={href:"https://eriqande.github.io/eca-bioinf-handbook/bioinformatic-file-formats.html",target:"_blank",rel:"noopener noreferrer"},O=n("https://eriqande.github.io/eca-bioinf-handbook/bioinformatic-file-formats.html"),B=n(),z=s("a",{href:"#footnote-ref4",class:"footnote-backref"},"\u21A9\uFE0E",-1),W=n(),V=s("a",{href:"#footnote-ref4:1",class:"footnote-backref"},"\u21A9\uFE0E",-1);function j(Y,X){const a=r("ExternalLinkIcon");return o(),l("div",null,[p,d,m,u,s("ol",null,[s("li",null,[v,s("a",h,[k,e(a)])]),s("li",null,[b,s("a",f,[g,e(a)])])]),_,s("section",w,[s("ol",y,[s("li",x,[s("p",null,[s("a",A,[E,e(a)]),C,R,S,T])]),s("li",q,[s("p",null,[s("a",$,[H,e(a)]),I,D])]),s("li",L,[s("p",null,[s("a",N,[G,e(a)]),P,M])]),s("li",F,[s("p",null,[s("a",U,[O,e(a)]),B,z,W,V])])])])])}const K=i(c,[["render",j],["__file","study_notes_EricA_handbook.html.vue"]]);export{K as default};
