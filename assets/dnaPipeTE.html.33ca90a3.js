import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as i,b as e,d as t,f as s,e as o,r as c}from"./app.a8071ed9.js";const l={},d=s(`<p><code>dnaPipeTE</code> can find, annotate and quantify Transposable Elements in small samples of NGS datasets. <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>Use docker:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> pull clemgoub/dnapipete:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Start the dnaPipeTE container with an interactive section</span>
<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> ~/Project:/mnt clemgoub/dnapipete:latest
<span class="token comment"># Run the dnaPipeTE</span>
python3 dnaPipeTE.py <span class="token parameter variable">-input</span> /mnt/reads_input.fastq <span class="token parameter variable">-output</span> /mnt/output <span class="token parameter variable">-RM_lib</span> <span class="token punctuation">..</span>/RepeatMasker/Libraries/RepeatMasker.lib <span class="token parameter variable">-genome_size</span> <span class="token number">170000000</span> <span class="token parameter variable">-genome_coverage</span> <span class="token number">0.1</span> <span class="token parameter variable">-sample_number</span> <span class="token number">2</span> <span class="token parameter variable">-RM_t</span> <span class="token number">0.2</span> <span class="token parameter variable">-cpu</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>According to the original paper <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup> for the tool, we need to pre-processing the reads.</p><p>For our own data, we have paired-end short reads from Illumina NGS technology. According to <sup class="footnote-ref"><a href="#footnote2">[2:1]</a><a class="footnote-anchor" id="footnote-ref2:1"></a></sup>, we can use only the first read of each pair for analysis.</p><div class="custom-container tip"><p class="custom-container-title">Fun fact</p><p>We actually ran the analysis separately using both first read R1 and second reads R2, and the results are different for the same sample.</p><p>I thought about merging paired-end reads, but the tool <sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup> mentioned explicitly that</p><p>&quot;The input file must be a single-end FASTQ or FASTQ.GZ file of NGS reads. It can be either the R1 or R2 end of a paired-end library. &quot;</p></div><p>But we do need to pre-process the reads to remove mitochondrial DNA to keep TE identification accurate.</p><h2 id="read-pre-processing" tabindex="-1"><a class="header-anchor" href="#read-pre-processing" aria-hidden="true">#</a> Read Pre-processing</h2><p>Paper <sup class="footnote-ref"><a href="#footnote2">[2:2]</a><a class="footnote-anchor" id="footnote-ref2:2"></a></sup> suggested:</p>`,12),p=o("Quality file: use "),h=e("code",null,"FASTX-toolkit",-1),f=o(": ("),u={href:"http://hannonlab.cshl.edu/fastx_toolkit/",target:"_blank",rel:"noopener noreferrer"},m=o("http://hannonlab.cshl.edu/fastx_toolkit/"),_=o(") with a minimum 20 average Phred score on 90% of the reads."),b=e("li",null,[o("Remove reads from mitochondrial DNA with "),e("code",null,"Bowtie2"),o(" by mapping reads to the whole mitochondrail genome sequence for own species on NCBI website.")],-1),g=s(`<p>Our approach:</p><ol><li>Use <code>fastp</code> <sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup> to pre-process QC/adapters/trimming/filtering/splitting/merging</li><li>Map reads to mitochondrial DNA</li><li>Extract the reads that are not mapped to mitochondrial DNA</li></ol><h2 id="script" tabindex="-1"><a class="header-anchor" href="#script" aria-hidden="true">#</a> Script</h2><p>If your FASTA file is indexed (you have a .fai file), use samtools to directly extract the mitochondrial genome.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>samtools faidx genome.fasta mitochondrion_genome <span class="token operator">&gt;</span> mitochondrial_genome.fasta

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr class="footnotes-sep">`,6),v={class:"footnotes"},k={class:"footnotes-list"},x={id:"footnote1",class:"footnote-item"},y={href:"https://github.com/clemgoub/dnaPipeTE",target:"_blank",rel:"noopener noreferrer"},T=o("https://github.com/clemgoub/dnaPipeTE"),E=o(),w=e("a",{href:"#footnote-ref1",class:"footnote-backref"},"\u21A9\uFE0E",-1),N=o(),P=e("a",{href:"#footnote-ref1:1",class:"footnote-backref"},"\u21A9\uFE0E",-1),A={id:"footnote2",class:"footnote-item"},R={href:"https://academic.oup.com/gbe/article/7/4/1192/533768?login=true",target:"_blank",rel:"noopener noreferrer"},S=o("https://academic.oup.com/gbe/article/7/4/1192/533768?login=true"),I=o(),B=e("a",{href:"#footnote-ref2",class:"footnote-backref"},"\u21A9\uFE0E",-1),F=o(),G=e("a",{href:"#footnote-ref2:1",class:"footnote-backref"},"\u21A9\uFE0E",-1),q=o(),M=e("a",{href:"#footnote-ref2:2",class:"footnote-backref"},"\u21A9\uFE0E",-1),D={id:"footnote3",class:"footnote-item"},Q={href:"https://github.com/OpenGene/fastp",target:"_blank",rel:"noopener noreferrer"},V=o("https://github.com/OpenGene/fastp"),C=o(),L=e("a",{href:"#footnote-ref3",class:"footnote-backref"},"\u21A9\uFE0E",-1);function O(U,j){const a=c("ExternalLinkIcon");return r(),i("div",null,[d,e("ol",null,[e("li",null,[p,h,f,e("a",u,[m,t(a)]),_]),b]),g,e("section",v,[e("ol",k,[e("li",x,[e("p",null,[e("a",y,[T,t(a)]),E,w,N,P])]),e("li",A,[e("p",null,[e("a",R,[S,t(a)]),I,B,F,G,q,M])]),e("li",D,[e("p",null,[e("a",Q,[V,t(a)]),C,L])])])])])}const X=n(l,[["render",O],["__file","dnaPipeTE.html.vue"]]);export{X as default};
