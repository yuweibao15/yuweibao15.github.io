import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as l,b as s,d as e,f as t,e as n,r as i}from"./app.d483d77f.js";const c="/assets/fastqc_sample_output.86854879.png",r={},u=t(`<p>Before starting aligning the fastqs to the reference genome, we need to do the important step of quality control. Here we use two tools, Fastqc <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> as a quality control tool for high throughput sequence data and fastp <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup> as a comprehensive tool for filtering bad reads and trimming adapter.</p><h2 id="_0-prepare-the-fastqs" tabindex="-1"><a class="header-anchor" href="#_0-prepare-the-fastqs" aria-hidden="true">#</a> 0. Prepare the fastqs</h2><p>When samples were sent for sequencing, they may be labeled differently from their original sample name. To keep our analysis clear, let&#39;s first rename all fastqs with their sample names.</p><div class="custom-container tip"><p class="custom-container-title">List files with paths in Linux</p><p>Full path</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">find</span> <span class="token string">&quot;<span class="token environment constant">$PWD</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Relative path</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">find</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Create the dict with format sample name:lable name</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;fq.gz&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s=./==;s=_1.fq.gz==;s=_2.fq.gz==;&#39;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s=/=:=&#39;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">&gt;</span> sample_label_dict.txt

<span class="token function">mkdir</span> raw_fq
<span class="token assign-left variable">WD</span><span class="token operator">=</span>WORK_DIR_TO_THE_FILES
<span class="token assign-left variable">out</span><span class="token operator">=</span><span class="token variable">$WD</span>/raw_fq
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> sample_label_dict.txt<span class="token variable">)</span></span>
<span class="token keyword">do</span>
    <span class="token assign-left variable">sample</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $i <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;:&quot;</span> <span class="token parameter variable">-f</span> <span class="token number">1</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">label</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $i <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;:&quot;</span> <span class="token parameter variable">-f</span> <span class="token number">2</span><span class="token variable">)</span></span>

    <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable">$WD</span>/<span class="token variable">$sample</span>/<span class="token variable">$label</span><span class="token punctuation">\\</span>_1.fq.gz <span class="token variable">$out</span>/<span class="token variable">$sample</span><span class="token punctuation">\\</span>_1.fq.gz
    <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable">$WD</span>/<span class="token variable">$sample</span>/<span class="token variable">$label</span><span class="token punctuation">\\</span>_2.fq.gz <span class="token variable">$out</span>/<span class="token variable">$sample</span><span class="token punctuation">\\</span>_2.fq.gz

<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-use-fastqc-to-see-the-original-quality-of-fastqs" tabindex="-1"><a class="header-anchor" href="#_1-use-fastqc-to-see-the-original-quality-of-fastqs" aria-hidden="true">#</a> 1. Use FastQC to see the original quality of fastqs</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token function">mkdir</span> fastQC
<span class="token function">mkdir</span> Shfiles
<span class="token function">mkdir</span> Log

<span class="token assign-left variable">FQ_DB</span><span class="token operator">=</span>raw_fq

<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> $FQ_DB/* <span class="token variable">)</span></span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token assign-left variable">SAMPLE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $i<span class="token operator">|</span><span class="token function">sed</span> <span class="token string">&#39;s=raw_fq/==;s/.fq.gz//&#39;</span><span class="token variable">)</span></span>
    <span class="token function">sed</span> <span class="token string">&quot;s/Hi/<span class="token variable">$SAMPLE</span>\\_QC/&quot;</span> Model.sh <span class="token operator">&gt;</span> Shfiles/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_QC.sh
    <span class="token builtin class-name">echo</span> fastqc <span class="token parameter variable">-o</span> fastQC   <span class="token parameter variable">-t</span> <span class="token number">7</span> <span class="token variable">$i</span>  <span class="token operator">&gt;&gt;</span> Shfiles/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_QC.sh
    sbatch Shfiles/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_QC.sh
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-summarize-results-from-fastqc" tabindex="-1"><a class="header-anchor" href="#_1-5-summarize-results-from-fastqc" aria-hidden="true">#</a> 1.5 Summarize results from FastQC</h3>`,8),d={class:"custom-container danger"},k=t('<p class="custom-container-title">Copyright: Karobben&#39;s bolg: https://karobben.github.io/</p><p>This part was created by my excellent colleague Karobben <sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>. In the result html of <code>FastQC</code>, we can see a graph like this <sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup>:</p><p><img src="'+c+`" alt="FastQC_graph" loading="lazy"> Karobeen implemented tools like web scrapping, R, and Python to save our time of looking at individual quality control html result produced by <code>FastQC</code>.</p><h4 id="a-create-a-csv-storing-the-information" tabindex="-1"><a class="header-anchor" href="#a-create-a-csv-storing-the-information" aria-hidden="true">#</a> A. Create a csv storing the information</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">import</span> os
<span class="token function">import</span> pandas as pd
from bs4 <span class="token function">import</span> BeautifulSoup

def Tab_grep<span class="token punctuation">(</span>Sample<span class="token punctuation">)</span>:
    html <span class="token operator">=</span> open<span class="token punctuation">(</span>Sample<span class="token punctuation">)</span>.read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html, <span class="token assign-left variable">features</span><span class="token operator">=</span><span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
    Summary <span class="token operator">=</span> soup.find_all<span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span>,<span class="token punctuation">{</span><span class="token string">&quot;class&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;summary&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    Reu_l <span class="token operator">=</span> <span class="token punctuation">[</span>Sample<span class="token punctuation">]</span>
    Cla_l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Sample&quot;</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">line</span> <span class="token keyword">in</span> Summary.find_all<span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span>:
        Cla_l <span class="token operator">+=</span> <span class="token punctuation">[</span>line.get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Reu_l <span class="token operator">+=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>line<span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    Result_TB <span class="token operator">=</span> pd.DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>Reu_l<span class="token punctuation">]</span>, <span class="token assign-left variable">columns</span><span class="token operator">=</span>Cla_l<span class="token punctuation">)</span>
    <span class="token builtin class-name">return</span> Result_TB

Result_TB <span class="token operator">=</span> pd.DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">Sample</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> os.listdir<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">&quot;fastqc.html&quot;</span> <span class="token keyword">in</span> i<span class="token punctuation">]</span>:
    Result_TB <span class="token operator">=</span> pd.concat<span class="token punctuation">(</span><span class="token punctuation">[</span>Result_TB, Tab_grep<span class="token punctuation">(</span>Sample<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

Result_TB.to_csv<span class="token punctuation">(</span><span class="token string">&quot;QC.csv&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-plot-information-in-r" tabindex="-1"><a class="header-anchor" href="#b-plot-information-in-r" aria-hidden="true">#</a> B. Plot information in R</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>library<span class="token punctuation">(</span>ggplot2<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>reshape2<span class="token punctuation">)</span>

TB <span class="token operator">&lt;</span>- read.csv<span class="token punctuation">(</span><span class="token string">&quot;QC.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span>-1<span class="token punctuation">]</span>
TB_P <span class="token operator">&lt;</span>- melt<span class="token punctuation">(</span>TB, id.vars <span class="token operator">=</span> <span class="token string">&quot;Sample&quot;</span><span class="token punctuation">)</span>
ggplot<span class="token punctuation">(</span><span class="token punctuation">)</span> +   geom_tile<span class="token punctuation">(</span>data<span class="token operator">=</span> TB_P, aes<span class="token punctuation">(</span>Sample,variable, <span class="token assign-left variable">fill</span><span class="token operator">=</span> value<span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-save-the-per-sequence-gc-content-plots-in-one-file" tabindex="-1"><a class="header-anchor" href="#c-save-the-per-sequence-gc-content-plots-in-one-file" aria-hidden="true">#</a> C. Save the per sequence GC content plots in one file</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>
<span class="token function">import</span> os
<span class="token function">import</span> pandas as pd
from bs4 <span class="token function">import</span> BeautifulSoup

def Pic_save<span class="token punctuation">(</span>Sample, <span class="token assign-left variable">OUT</span><span class="token operator">=</span><span class="token string">&quot;/home/wliu15/OUT.md&quot;</span><span class="token punctuation">)</span>:
    html <span class="token operator">=</span> open<span class="token punctuation">(</span>Sample<span class="token punctuation">)</span>.read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html, <span class="token assign-left variable">features</span><span class="token operator">=</span><span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
    F <span class="token operator">=</span> open<span class="token punctuation">(</span>OUT,<span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
    F.write<span class="token punctuation">(</span>Sample+<span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token punctuation">)</span>
    F.write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>soup.find<span class="token punctuation">(</span><span class="token string">&#39;h2&#39;</span>,<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;M5&quot;</span><span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">)</span>
    F.write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>soup.find<span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span>,<span class="token punctuation">{</span><span class="token string">&quot;alt&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;Per base sequence content&quot;</span><span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">)</span>
    F.close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token for-or-select variable">Sample</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> os.listdir<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">&quot;fastqc.html&quot;</span> <span class="token keyword">in</span> i<span class="token punctuation">]</span>:
    Pic_save<span class="token punctuation">(</span>Sample<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="d-summarize-the-overrepresented-sequences" tabindex="-1"><a class="header-anchor" href="#d-summarize-the-overrepresented-sequences" aria-hidden="true">#</a> D. Summarize the overrepresented sequences</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">import</span> pandas as pd

TB <span class="token operator">=</span> pd.DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">Sample</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> os.listdir<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">&quot;fastqc.html&quot;</span> <span class="token keyword">in</span> i<span class="token punctuation">]</span>:
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>pd.read_html<span class="token punctuation">(</span>Sample<span class="token punctuation">))</span><span class="token operator">!=</span><span class="token number">1</span>:
        TMP <span class="token operator">=</span> pd.read_html<span class="token punctuation">(</span>Sample<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        TMP<span class="token punctuation">[</span><span class="token string">&#39;Sample&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> Sample
        TB <span class="token operator">=</span> pd.concat<span class="token punctuation">(</span><span class="token punctuation">[</span>TB, TMP<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These sequences can be used to BLAST <sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup> to determine potential contamination cause.</p>`,12),v=n("For how the results look like and more bioinformatics skills, check "),b={href:"https://karobben.github.io/",target:"_blank",rel:"noopener noreferrer"},m=n("Karobben's bolg"),f=t(`<h3 id="_2-use-fastp-to-cut-bad-reads-and-trim-adapters" tabindex="-1"><a class="header-anchor" href="#_2-use-fastp-to-cut-bad-reads-and-trim-adapters" aria-hidden="true">#</a> 2. Use fastp to cut bad reads and trim adapters</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">FQ_DB</span><span class="token operator">=</span>raw_fq

<span class="token function">mkdir</span> fastp_fq
<span class="token assign-left variable">out</span><span class="token operator">=</span>fastp_fq

<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> sample_label_dict.txt<span class="token variable">)</span></span>
<span class="token keyword">do</span> <span class="token assign-left variable">SAMPLE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $i <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;:&quot;</span> <span class="token parameter variable">-f</span> <span class="token number">1</span><span class="token variable">)</span></span>
   <span class="token function">sed</span> <span class="token string">&quot;s/Hi/<span class="token variable">$SAMPLE</span>\\_fq/&quot;</span> Model.sh <span class="token operator">&gt;&gt;</span> Shfiles/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_fp.sh
   <span class="token builtin class-name">echo</span> fastp <span class="token parameter variable">-i</span> <span class="token variable">$FQ_DB</span>/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_1.fq.gz <span class="token parameter variable">-I</span> <span class="token variable">$FQ_DB</span>/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_2.fq.gz <span class="token parameter variable">-o</span> <span class="token variable">$out</span>/<span class="token variable">$i</span><span class="token punctuation">\\</span>_1.fq.gz <span class="token parameter variable">-O</span> <span class="token variable">$out</span>/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_2.fq.gz <span class="token operator">&gt;</span> Shfiles/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_fp.sh
   <span class="token builtin class-name">echo</span> <span class="token function">mv</span> fastp.html <span class="token variable">$out</span>/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_fastp.html <span class="token operator">&gt;</span> Shfiles/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_fp.sh
   <span class="token builtin class-name">echo</span> <span class="token function">mv</span> fastp.json <span class="token variable">$out</span>/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_fastp.json <span class="token operator">&gt;</span> Shfiles/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_fp.sh

   sbatch Shfiles/<span class="token variable">$SAMPLE</span><span class="token punctuation">\\</span>_fp.sh
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="supplementary" tabindex="-1"><a class="header-anchor" href="#supplementary" aria-hidden="true">#</a> Supplementary <sup class="footnote-ref"><a href="#footnote3">[3:1]</a><a class="footnote-anchor" id="footnote-ref3:1"></a></sup></h3><p><code>Model.sh</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token comment">#SBATCH --qos=normal            # Quality of Service</span>
<span class="token comment">#SBATCH --job-name=Hi       # Job Name</span>
<span class="token comment">#SBATCH --time=1-0:00:00         # WallTime</span>
<span class="token comment">#SBATCH --nodes=1               # Number of Nodes</span>
<span class="token comment">#SBATCH --ntasks-per-node=1     # Number of tasks (MPI processes)</span>
<span class="token comment">#SBATCH --cpus-per-task=1	# Number of threads per task (OMP threads)</span>
<span class="token comment">#SBATCH --output=Log/Hi.out	  ### File in which to store job output</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr class="footnotes-sep">`,6),h={class:"footnotes"},_={class:"footnotes-list"},g={id:"footnote1",class:"footnote-item"},q={href:"https://www.bioinformatics.babraham.ac.uk/projects/fastqc/",target:"_blank",rel:"noopener noreferrer"},S=n("https://www.bioinformatics.babraham.ac.uk/projects/fastqc/"),y=n(),w=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"\u21A9\uFE0E",-1),$=n(),B=s("a",{href:"#footnote-ref1:1",class:"footnote-backref"},"\u21A9\uFE0E",-1),T={id:"footnote2",class:"footnote-item"},x={href:"https://github.com/OpenGene/fastp",target:"_blank",rel:"noopener noreferrer"},P=n("https://github.com/OpenGene/fastp"),C=n(),A=s("a",{href:"#footnote-ref2",class:"footnote-backref"},"\u21A9\uFE0E",-1),M={id:"footnote3",class:"footnote-item"},L={href:"https://karobben.github.io/2022/07/20/Python/fastqc_crawl/",target:"_blank",rel:"noopener noreferrer"},F=n("Karobben blog: Collect FastqQC results by python"),E=n(),Q=s("a",{href:"#footnote-ref3",class:"footnote-backref"},"\u21A9\uFE0E",-1),z=n(),D=s("a",{href:"#footnote-ref3:1",class:"footnote-backref"},"\u21A9\uFE0E",-1),R={id:"footnote4",class:"footnote-item"},H={href:"https://blast.ncbi.nlm.nih.gov/Blast.cgi",target:"_blank",rel:"noopener noreferrer"},N=n("https://blast.ncbi.nlm.nih.gov/Blast.cgi"),O=n(),W=s("a",{href:"#footnote-ref4",class:"footnote-backref"},"\u21A9\uFE0E",-1);function I(j,K){const a=i("ExternalLinkIcon");return p(),l("div",null,[u,s("div",d,[k,s("p",null,[v,s("a",b,[m,e(a)])])]),f,s("section",h,[s("ol",_,[s("li",g,[s("p",null,[s("a",q,[S,e(a)]),y,w,$,B])]),s("li",T,[s("p",null,[s("a",x,[P,e(a)]),C,A])]),s("li",M,[s("p",null,[s("a",L,[F,e(a)]),E,Q,z,D])]),s("li",R,[s("p",null,[s("a",H,[N,e(a)]),O,W])])])])])}const G=o(r,[["render",I],["__file","fastqc_fastp.html.vue"]]);export{G as default};
