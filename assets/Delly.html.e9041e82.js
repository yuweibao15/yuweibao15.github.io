import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as n,b as e,d as t,f as r,e as a,r as i}from"./app.7f36856e.js";const c={},d=r(`<h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>Using docker image which pulls the latest version (v1.1.6) by default.<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> pull dellytools/delly
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="custom-container tip"><p class="custom-container-title">Input file</p><p>Delly needs a sorted, indexed and duplicate marked bam file for every input sample. <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>delly call <span class="token parameter variable">-g</span> hg19.fa input.bam <span class="token operator">&gt;</span> delly.vcf
delly call <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>ref.fa<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>sample1.sort.bam<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>sample2.sort.bam<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="somatic-sv-calling" tabindex="-1"><a class="header-anchor" href="#somatic-sv-calling" aria-hidden="true">#</a> Somatic SV calling</h3><ol><li>At least one tumor sample and a matched control sample are required for SV discovery</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>delly call <span class="token parameter variable">-x</span> hg19.excl <span class="token parameter variable">-o</span> t1.bcf <span class="token parameter variable">-g</span> hg19.fa tumor1.bam control1.bam
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Somatic pre-filtering requires a tab-delimited sample description file where the first column is the sample id (as in the VCF/BCF file) and the second column is either tumor or control.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>delly filter <span class="token parameter variable">-f</span> somatic <span class="token parameter variable">-o</span> t1.pre.bcf <span class="token parameter variable">-s</span> samples.tsv t1.bcf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Genotype pre-filtered somatic sites across a larger panel of control samples to efficiently filter false postives and germline SVs. For performance reasons, this can be run in parallel for each sample of the control panel and you may want to combine multiple pre-filtered somatic site lists from multiple tumor samples.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>delly call <span class="token parameter variable">-g</span> hg19.fa <span class="token parameter variable">-v</span> t1.pre.bcf <span class="token parameter variable">-o</span> geno.bcf <span class="token parameter variable">-x</span> hg19.excl tumor1.bam control1.bam <span class="token punctuation">..</span>. controlN.bam
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>Post-filter for somatic SVs using all control samples.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>delly filter <span class="token parameter variable">-f</span> somatic <span class="token parameter variable">-o</span> t1.somatic.bcf <span class="token parameter variable">-s</span> samples.tsv geno.bcf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr class="footnotes-sep">`,16),p={class:"footnotes"},m={class:"footnotes-list"},h={id:"footnote1",class:"footnote-item"},f={href:"https://hub.docker.com/r/dellytools/delly",target:"_blank",rel:"noopener noreferrer"},u=a("https://hub.docker.com/r/dellytools/delly"),b=a(),v=e("a",{href:"#footnote-ref1",class:"footnote-backref"},"\u21A9\uFE0E",-1),g={id:"footnote2",class:"footnote-item"},_={href:"https://github.com/dellytools/delly",target:"_blank",rel:"noopener noreferrer"},k=a("https://github.com/dellytools/delly"),y=a(),x=e("a",{href:"#footnote-ref2",class:"footnote-backref"},"\u21A9\uFE0E",-1);function V(S,N){const s=i("ExternalLinkIcon");return o(),n("div",null,[d,e("section",p,[e("ol",m,[e("li",h,[e("p",null,[e("a",f,[u,t(s)]),b,v])]),e("li",g,[e("p",null,[e("a",_,[k,t(s)]),y,x])])])])])}const w=l(c,[["render",V],["__file","Delly.html.vue"]]);export{w as default};
