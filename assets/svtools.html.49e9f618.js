import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,b as a,d as n,f as i,e,r}from"./app.3e8e7ed5.js";const c={},p=i(`<p><code>svtools</code> <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> are the comprehensive utilities to explore structural variations in genomes <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><div class="custom-container danger"><p class="custom-container-title">Pythin version</p><p><code>svtools</code> requires Python 2.7.</p></div><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation <sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></h2><p>My personal preference is always using docker images [^docker]. But for experiment purpose, I want to use <code>svtools (v0.3.0)</code> using <code>pip install</code></p><h3 id="failure" tabindex="-1"><a class="header-anchor" href="#failure" aria-hidden="true">#</a> Failure</h3><h4 id="attempt-1-failed-using-pip" tabindex="-1"><a class="header-anchor" href="#attempt-1-failed-using-pip" aria-hidden="true">#</a> Attempt 1 failed using pip</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>conda activate py27_svtools
pip <span class="token function">install</span> <span class="token assign-left variable">svtools</span><span class="token operator">==</span><span class="token number">0.3</span>.0
svtools <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There is error <code>ImportError: No module named abc</code></p><div class="custom-container tip"><p class="custom-container-title">Clean workspace</p><p>Uninstall the product from previous attempt if needed</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip uninstall svtools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h4 id="attemp-2-failed-using-direct-installation-from-the-git-repo" tabindex="-1"><a class="header-anchor" href="#attemp-2-failed-using-direct-installation-from-the-git-repo" aria-hidden="true">#</a> Attemp 2 failed using direct installation from the git repo</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/hall-lab/svtools.git svtools_test
<span class="token builtin class-name">cd</span> svtools_test
<span class="token function">git</span> tag <span class="token parameter variable">-l</span>
<span class="token function">git</span> checkout tags/v0.3.0
pip <span class="token function">install</span> <span class="token builtin class-name">.</span>
svtools <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even it shows <code>Successfully installed svtools-0.3.0</code> but the version check still fails with the same error as previous attempt.</p><h4 id="attemp-3-failed-using-github-release-tarball" tabindex="-1"><a class="header-anchor" href="#attemp-3-failed-using-github-release-tarball" aria-hidden="true">#</a> Attemp 3 failed using github release tarball</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/hall-lab/svtools/archive/refs/tags/v0.3.0.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-xvzf</span> v0.3.0.tar.gz
<span class="token builtin class-name">cd</span> svtools-0.3.0/
pip <span class="token function">install</span> <span class="token builtin class-name">.</span>
svtools <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even it shows <code>Successfully installed svtools-0.3.0</code> but the version check still fails with the same error as previous attempt.</p><h3 id="succuss" tabindex="-1"><a class="header-anchor" href="#succuss" aria-hidden="true">#</a> Succuss</h3><h4 id="attempt-4-just-use-docker-image" tabindex="-1"><a class="header-anchor" href="#attempt-4-just-use-docker-image" aria-hidden="true">#</a> Attempt 4: Just use docker image</h4><p>I have not found a way to work around it to get <code>svtools (v0.3.0)</code> to run properly, so I will ignore the version and just use docker images of the latest version of <code>svtools (v0.5.1)</code>. [^docker]</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> pull halllab/svtools:v0.5.1
<span class="token function">docker</span> run <span class="token parameter variable">-v</span> halllab/svtools:v0.5.1 svtools <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>It works. <code>docker</code> won another score in my heart. Let&#39;s move on.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>svtools <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>--version<span class="token punctuation">]</span> <span class="token punctuation">[</span>--support<span class="token punctuation">]</span> subcommand <span class="token punctuation">..</span>.

svtools vcfpaste <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span>FILE<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-m <span class="token operator">&lt;</span>VCF<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-t <span class="token operator">&lt;</span>DIR<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-q<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use-svtools-to-created-a-panel-of-normals-pon" tabindex="-1"><a class="header-anchor" href="#use-svtools-to-created-a-panel-of-normals-pon" aria-hidden="true">#</a> Use svTools to created a panel of normals (PON)</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 1. Prepare vcf files</span>
tabix sample.vcf
<span class="token comment"># 2. Merge normal VCF files:</span>
svtools vcfpaste sample1.vcf.gz sample2.vcf.gz sample3.vcf.gz <span class="token parameter variable">-o</span> merged_normals.vcf
<span class="token comment"># 3. Create a PON using the merged VCF file</span>
svtools lsort merged_normals.vcf <span class="token parameter variable">-o</span> sorted_merged_normals.vcf
svtools lmerge sorted_merged_normals.vcf <span class="token parameter variable">-i</span> <span class="token number">50</span> <span class="token parameter variable">-d</span> <span class="token number">0.5</span> <span class="token parameter variable">-o</span> PON.vcf
<span class="token comment"># 4. Filter your tumor sample VCF file using the PON:</span>
svtools afreq PON.vcf tumor_sample.vcf <span class="token parameter variable">-o</span> filtered_tumor_sample.vcf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Parameters</p><p>Here, -i 50 sets the minimum number of supporting evidence (like paired-end reads or split reads) for a variant to be included in the PON, and -d 0.5 sets the minimum allelic fraction for a variant to be included. You can adjust these parameters according to your needs. This command will create a PON file named PON.vcf.</p></div><h2 id="svtyper" tabindex="-1"><a class="header-anchor" href="#svtyper" aria-hidden="true">#</a> SVTyper</h2><p><code>SVTyper</code> can compute genotype of structural variants based on breakpoint depth.</p><div class="custom-container danger"><p class="custom-container-title">Pythin version</p><p><code>SVTyper</code> requires Python 2.7.</p></div><h3 id="installation-1" tabindex="-1"><a class="header-anchor" href="#installation-1" aria-hidden="true">#</a> Installation</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> git+https://github.com/hall-lab/svtyper.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="usage-1" tabindex="-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h3><ol><li>Using <code>normal.bam</code> to call <code>normal.SV.vcf</code></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>svtyper <span class="token parameter variable">-i</span> <span class="token variable">$input</span>.vcf <span class="token parameter variable">-T</span> <span class="token variable">$REF</span> <span class="token parameter variable">-B</span> <span class="token variable">$normal</span> <span class="token parameter variable">-o</span> <span class="token variable">$out</span>/<span class="token variable">$NO</span>.vcf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Merge all <code>normal.SV.vcf</code></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bcftools merge <span class="token operator">&lt;</span>path/to/normal_sample1.vcf<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>path/to/normal_sample2.vcf<span class="token operator">&gt;</span> <span class="token punctuation">..</span>. <span class="token operator">&lt;</span>path/to/normal_sampleN.vcf<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>path/to/pon.vcf<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-m</span> all <span class="token punctuation">\\</span>
<span class="token parameter variable">--threads</span> <span class="token operator">&lt;</span>number of threads<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now I realized that I am missing input.vcf, which is the product of a structural variant caller. It is werid that to use <code>Delly</code>, we want to have <code>PON</code> in hand. While to produce <code>PON</code> using <code>svTyper</code>, we need the results produced by SV callers such as <code>Delly </code> or <code>Lumpy</code>.</p><hr class="footnotes-sep">`,37),d={class:"footnotes"},u={class:"footnotes-list"},v={id:"footnote1",class:"footnote-item"},m={href:"https://academic.oup.com/bioinformatics/article/35/22/4782/5520944",target:"_blank",rel:"noopener noreferrer"},h=e("https://academic.oup.com/bioinformatics/article/35/22/4782/5520944"),b=e(),f=a("a",{href:"#footnote-ref1",class:"footnote-backref"},"\u21A9\uFE0E",-1),g={id:"footnote2",class:"footnote-item"},k={href:"https://github.com/hall-lab/svtools",target:"_blank",rel:"noopener noreferrer"},_=e("https://github.com/hall-lab/svtools"),x=e(),y=a("a",{href:"#footnote-ref2",class:"footnote-backref"},"\u21A9\uFE0E",-1),w={id:"footnote3",class:"footnote-item"},N={href:"https://github.com/hall-lab/svtools/blob/master/INSTALL.md",target:"_blank",rel:"noopener noreferrer"},I=e("https://github.com/hall-lab/svtools/blob/master/INSTALL.md"),P=e(),V=a("a",{href:"#footnote-ref3",class:"footnote-backref"},"\u21A9\uFE0E",-1);function S(O,T){const s=r("ExternalLinkIcon");return o(),l("div",null,[p,a("section",d,[a("ol",u,[a("li",v,[a("p",null,[a("a",m,[h,n(s)]),b,f])]),a("li",g,[a("p",null,[a("a",k,[_,n(s)]),x,y])]),a("li",w,[a("p",null,[a("a",N,[I,n(s)]),P,V])])])])])}const F=t(c,[["render",S],["__file","svtools.html.vue"]]);export{F as default};
