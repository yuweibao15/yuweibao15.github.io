import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,b as a,d as n,f as i,e,r}from"./app.a8071ed9.js";const c={},p=i(`<p>Here, we are learning how to use <code>freebayes</code> <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> to call SNVs and further to filter variants using <code>vcflib</code> <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup> and <code>vt</code> <sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup> following Nick Riddiford 21 supplementary methods <sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup>.</p><h2 id="_1-freebayes-v1-3-6" tabindex="-1"><a class="header-anchor" href="#_1-freebayes-v1-3-6" aria-hidden="true">#</a> 1. freebayes (v1.3.6) <sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup></h2><h3 id="purpose" tabindex="-1"><a class="header-anchor" href="#purpose" aria-hidden="true">#</a> Purpose</h3><p><code>freebayes</code> is a Bayesian genetic variant detector designed to find small polymorphisms, specifically SNPs, indels, MNPs, and complex events smaller than the length of a short-read sequencing alignment.</p><h3 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/freebayes/freebayes/archive/refs/tags/v1.3.6.zip

<span class="token function">unzip</span> v1.3.6.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>freebayes <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>REFERENCE<span class="token punctuation">]</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>BAM FILES<span class="token punctuation">]</span> <span class="token operator">&gt;</span><span class="token punctuation">[</span>OUTPUT<span class="token punctuation">]</span>
freebayes <span class="token parameter variable">-f</span> ref.fa aln.bam <span class="token operator">&gt;</span>var.vcf

freebayes <span class="token parameter variable">-f</span> ref.fa --pooled-discrete --genotype-qualities tumor.bam normal.bam <span class="token operator">|</span> vcfsamplediff <span class="token parameter variable">-s</span> VT normal tumor -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Genomic Research paper <sup class="footnote-ref"><a href="#footnote4">[4:1]</a><a class="footnote-anchor" id="footnote-ref4:1"></a></sup> usage:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>freebayes <span class="token parameter variable">-f</span> ref.fa  <span class="token parameter variable">-0</span> --pooled-discrete --genotype-qualities --min-coverage <span class="token number">20</span> tumor.bam normal.bam  <span class="token operator">&gt;</span> output.vcf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-vcflib" tabindex="-1"><a class="header-anchor" href="#_2-vcflib" aria-hidden="true">#</a> 2. vcflib <sup class="footnote-ref"><a href="#footnote2">[2:1]</a><a class="footnote-anchor" id="footnote-ref2:1"></a></sup></h2><h3 id="purpose-1" tabindex="-1"><a class="header-anchor" href="#purpose-1" aria-hidden="true">#</a> Purpose</h3><p><code>vcflib</code> processes the VCF variant calling format</p><h3 id="installation-1" tabindex="-1"><a class="header-anchor" href="#installation-1" aria-hidden="true">#</a> Installation</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>conda <span class="token function">install</span> <span class="token parameter variable">-c</span> bioconda vcflib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="usage-1" tabindex="-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>vcfallelicprimitives <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
vcfsamplediff options <span class="token punctuation">[</span> <span class="token punctuation">..</span>. <span class="token punctuation">]</span>

vcfsamplediff SAME TAP1 PATIENT1 compare_tap1.vcf <span class="token operator">|</span> vcffilter <span class="token parameter variable">-f</span> <span class="token string">&quot;QUAL / AO &gt; 10&quot;</span> <span class="token operator">|</span> vcffilter <span class="token parameter variable">-f</span> <span class="token string">&quot;NS = 2&quot;</span> <span class="token operator">|</span> vcffilter <span class="token parameter variable">-f</span> <span class="token string">&quot;! ( SAME = germline ) &quot;</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">&quot;^#&quot;</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span>

vcfsamplediff --diff-site tumor.vcf normal.vcf <span class="token operator">&gt;</span> somatic_variants.txt

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-vt-v0-57721" tabindex="-1"><a class="header-anchor" href="#_3-vt-v0-57721" aria-hidden="true">#</a> 3. vt (v0.57721) <sup class="footnote-ref"><a href="#footnote3">[3:1]</a><a class="footnote-anchor" id="footnote-ref3:1"></a></sup></h2><h3 id="purpose-2" tabindex="-1"><a class="header-anchor" href="#purpose-2" aria-hidden="true">#</a> Purpose:</h3><p><code>vt</code> decomposes biallelic block substitutions into their constituent SNVs</p><h3 id="installation-2" tabindex="-1"><a class="header-anchor" href="#installation-2" aria-hidden="true">#</a> Installation:</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/atks/vt.git
<span class="token builtin class-name">cd</span> vt
<span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span>
<span class="token function">make</span>
<span class="token comment"># Test the build</span>
<span class="token function">make</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usage-2" tabindex="-1"><a class="header-anchor" href="#usage-2" aria-hidden="true">#</a> Usage:</h3><p>Documentation <sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Decomposes biallelic block substitutions and write out to decomposed_blocksub.vcf</span>
vt decompose_blocksub gatk.vcf <span class="token parameter variable">-o</span> decomposed_blocksub.vcf 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary-script" tabindex="-1"><a class="header-anchor" href="#summary-script" aria-hidden="true">#</a> Summary script</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Input files</span>
<span class="token assign-left variable">REF</span><span class="token operator">=</span>reference.fasta
<span class="token assign-left variable">TU</span><span class="token operator">=</span>TUMOR
<span class="token assign-left variable">NO</span><span class="token operator">=</span>NORMAL
<span class="token assign-left variable">tumor</span><span class="token operator">=</span>TUMOR.bam
<span class="token assign-left variable">normal</span><span class="token operator">=</span>NORMAL.bam
<span class="token assign-left variable">unmappable_genome</span><span class="token operator">=</span>unmappable.bed

<span class="token comment"># 1. Run \`freebayes\` for each tumor normal pair</span>
freebayes <span class="token parameter variable">-f</span> <span class="token variable">$REF</span>  <span class="token parameter variable">-0</span> --pooled-discrete --genotype-qualities --min-coverage <span class="token number">20</span> <span class="token variable">$tumor</span> <span class="token variable">$normal</span> <span class="token operator">&gt;</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.freebayes.unfiltered.vcf
<span class="token comment"># 2. Exclude calls within the unmappable genome</span>
bedtools intersect <span class="token parameter variable">-v</span> <span class="token parameter variable">-a</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.freebayes.unfiltered.vcf <span class="token parameter variable">-b</span> <span class="token variable">$unmappable_genome</span> <span class="token parameter variable">-wa</span> <span class="token operator">&gt;</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.freebayes.unfiltered.un.vcf
<span class="token comment"># 3. Filter using \`vcflib\` function \`vcfallelicprimitives\`</span>
vcfallelicprimitives <span class="token parameter variable">-m</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.freebayes.unfiltered.un.vcf <span class="token operator">&gt;</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.vcflib.vcf
<span class="token comment"># 4. Filter using \`vt\` function \`decompose_blocksub\`</span>
bgzip <span class="token parameter variable">-c</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.vcflib.vcf <span class="token operator">&gt;</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.vcflib.vcf.gz
tabix <span class="token parameter variable">-fp</span> vcf <span class="token variable">$out</span>/<span class="token variable">$TU</span>.vcflib.vcf.gz
vt decompose_blocksub <span class="token variable">$out</span>/<span class="token variable">$TU</span>.vcflib.vcf.gz <span class="token parameter variable">-o</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.vt.decompose.vcf
<span class="token comment"># 5. Normalize calls using \`vt\` function \`normalize\`</span>
vt normalize <span class="token variable">$out</span>/<span class="token variable">$TU</span>.vt.decompose.vcf <span class="token parameter variable">-r</span> <span class="token variable">$REF</span> <span class="token parameter variable">-o</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.vt.normalize.vcf
<span class="token comment">## 6. NEED TO DO: Use vcfsamplediff to select somatic calls</span>
vcfsamplediff SAME <span class="token variable">$TU</span> <span class="token variable">$NO</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.vt.normalize.vcf <span class="token operator">|</span> vcffilter <span class="token parameter variable">-f</span> <span class="token string">&quot;DP &gt; 20&quot;</span> <span class="token operator">|</span> vcffilter <span class="token parameter variable">-f</span> <span class="token string">&quot;SAF &gt; 0 &amp; SAR &gt; 0&quot;</span> <span class="token operator">|</span> vcffilter <span class="token parameter variable">-f</span> <span class="token string">&quot;RPR &gt; 0 &amp; RPL &gt; 0&quot;</span> <span class="token operator">|</span> vcffilter <span class="token parameter variable">-f</span> <span class="token string">&quot;! ( SAME = germline ) &quot;</span> <span class="token operator">&gt;</span> <span class="token variable">$out</span>/<span class="token variable">$TU</span>.vcflib.filtered.vcf
<span class="token comment">############## Work in progress #############</span>
<span class="token comment"># ########### Filter ###########</span>
<span class="token comment"># # 7. Select calls with a depth greater than 20</span>
<span class="token comment"># vcffilter -f &quot;DP &gt; 20&quot; $out/$TU.vt.normalize.vcf &gt; $out/$TU.vcflib.depth.vcf</span>
<span class="token comment"># # Get high-quality calls</span>
<span class="token comment"># vcffilter -f \\&quot;QUAL &gt; 1 &amp; QUAL / AO &gt; 10\\&quot; $out/$TU.vcflib.depth.vcf &gt; $out/$TU.vcflib.depth.highquality.vcf</span>
<span class="token comment"># # Get calls supported by reads on both DNA strands</span>
<span class="token comment"># vcffilter -f \\&quot;SAF &gt; 0 &amp; SAR &gt; 0\\&quot; $out/$TU.vcflib.depth.vcf &gt; $out/$TU.vcflib.depth.bothreads.vcf</span>
<span class="token comment"># # Get calls with both right- and left-facing readsupport</span>
<span class="token comment"># vcffilter -f \\&quot;RPR &gt; 0 &amp; RPL &gt; 0\\&quot; $out/$TU.vcflib.depth.vcf &gt; $out/$TU.vcflib.depth.leftright.vcf</span>
<span class="token comment"># ## Clear intermediate files if needed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="other-people-s-realated-blogs" tabindex="-1"><a class="header-anchor" href="#other-people-s-realated-blogs" aria-hidden="true">#</a> Other people&#39;s realated blogs</h3>`,28),d=e("Arun Seetharam: "),f={href:"https://bioinformaticsworkbook.org/dataAnalysis/VariantCalling/freebayes-dnaseq-workflow.html#gsc.tab=0",target:"_blank",rel:"noopener noreferrer"},v=e("FreeBayes variant calling workflow for DNA-Seq"),u=a("hr",{class:"footnotes-sep"},null,-1),b={class:"footnotes"},m={class:"footnotes-list"},h={id:"footnote1",class:"footnote-item"},k={href:"https://github.com/freebayes/freebayes",target:"_blank",rel:"noopener noreferrer"},g=e("https://github.com/freebayes/freebayes"),_=e(),$=a("a",{href:"#footnote-ref1",class:"footnote-backref"},"\u21A9\uFE0E",-1),y=e(),T=a("a",{href:"#footnote-ref1:1",class:"footnote-backref"},"\u21A9\uFE0E",-1),U={id:"footnote2",class:"footnote-item"},q={href:"https://github.com/vcflib/vcflib",target:"_blank",rel:"noopener noreferrer"},x=e("https://github.com/vcflib/vcflib"),A=e(),N=a("a",{href:"#footnote-ref2",class:"footnote-backref"},"\u21A9\uFE0E",-1),R=e(),E=a("a",{href:"#footnote-ref2:1",class:"footnote-backref"},"\u21A9\uFE0E",-1),S={id:"footnote3",class:"footnote-item"},w={href:"https://github.com/atks/vt",target:"_blank",rel:"noopener noreferrer"},P=e("https://github.com/atks/vt"),O=e(),z=a("a",{href:"#footnote-ref3",class:"footnote-backref"},"\u21A9\uFE0E",-1),F=e(),V=a("a",{href:"#footnote-ref3:1",class:"footnote-backref"},"\u21A9\uFE0E",-1),L={id:"footnote4",class:"footnote-item"},M={href:"https://genome.cshlp.org/content/early/2021/06/24/gr.268441.120",target:"_blank",rel:"noopener noreferrer"},I=e("https://genome.cshlp.org/content/early/2021/06/24/gr.268441.120"),D=e(),B=a("a",{href:"#footnote-ref4",class:"footnote-backref"},"\u21A9\uFE0E",-1),C=e(),G=a("a",{href:"#footnote-ref4:1",class:"footnote-backref"},"\u21A9\uFE0E",-1),Q={id:"footnote5",class:"footnote-item"},H={href:"https://genome.sph.umich.edu/wiki/Vt",target:"_blank",rel:"noopener noreferrer"},W=e("https://genome.sph.umich.edu/wiki/Vt"),j=e(),J=a("a",{href:"#footnote-ref5",class:"footnote-backref"},"\u21A9\uFE0E",-1);function K(X,Y){const s=r("ExternalLinkIcon");return o(),l("div",null,[p,a("p",null,[d,a("a",f,[v,n(s)])]),u,a("section",b,[a("ol",m,[a("li",h,[a("p",null,[a("a",k,[g,n(s)]),_,$,y,T])]),a("li",U,[a("p",null,[a("a",q,[x,n(s)]),A,N,R,E])]),a("li",S,[a("p",null,[a("a",w,[P,n(s)]),O,z,F,V])]),a("li",L,[a("p",null,[a("a",M,[I,n(s)]),D,B,C,G])]),a("li",Q,[a("p",null,[a("a",H,[W,n(s)]),j,J])])])])])}const ea=t(c,[["render",K],["__file","freebayes.html.vue"]]);export{ea as default};
