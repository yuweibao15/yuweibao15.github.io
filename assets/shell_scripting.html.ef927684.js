import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as o,b as s,d as t,e,f as a,r as c}from"./app.84cecd5c.js";const d={},r=e("Here are some notes from attending "),p={href:"http://www.hpc.lsu.edu/training/tutorials.php",target:"_blank",rel:"noopener noreferrer"},u=e("LSU basic shell scripting training"),h=a(`<div class="custom-container tip"><p class="custom-container-title">What can you do with a shell?</p><p>Check the current shell</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>List available shells on the system</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> /etc/shells
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Change to another shell</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">exec</span> <span class="token function">sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Date and time</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">date</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>wget: get online files</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">wget</span> https://ftp.gnu.org/gnu/gcc/gcc-7.1.0/gcc-7.1.0.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Compile and run applications</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>gcc hello.c \u2013o hello
./hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">Quotation - Examples</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">str1</span><span class="token operator">=</span><span class="token string">&#39;echo $USER&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$str1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>echo $USER
</code></pre><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">str2</span><span class="token operator">=</span><span class="token string">&quot;echo <span class="token environment constant">$USER</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$str2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>echo ybao2
</code></pre><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">str3</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$USER</span><span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable">$str3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>ybao2
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">GNU basic calculator (bc) external calculator</p><p>Add two numbers</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;3.8 + 4.2&quot;</span> <span class="token operator">|</span> <span class="token function">bc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>8.0
</code></pre><p>Divide two numbers and print result with a precision of 5 digits:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;scale=5; 2/5&quot;</span> <span class="token operator">|</span> <span class="token function">bc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>.40000
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">Arrays Operations</p><p>Initialization</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">declare</span> <span class="token parameter variable">-a</span> my_array
<span class="token assign-left variable">my_array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span> <span class="token string">&quot;Bill&quot;</span> <span class="token string">&quot;Cox&quot;</span> <span class="token string">&quot;David&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Print the whole array</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token variable">\${my_array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Delete the entire array</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">unset</span> my_array
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">File Operations</p><table><thead><tr><th>Operation</th><th>bash</th></tr></thead><tbody><tr><td>File exists</td><td><code>if [ -e test ]</code></td></tr><tr><td>File is a regular file</td><td><code>if [ -f test]</code></td></tr><tr><td>File is a directory</td><td><code>if [ -d /home ]</code></td></tr><tr><td>File is not zero size</td><td><code>if [ -s test ]</code></td></tr><tr><td>File has read permission</td><td><code>if [ -r test ]</code></td></tr><tr><td>File has write permission</td><td><code>if [ -w test ]</code></td></tr><tr><td>File has execute permission</td><td><code>if [ -x test ]</code></td></tr></tbody></table></div><div class="custom-container tip"><p class="custom-container-title">Integer Comparisons</p><table><thead><tr><th>Operation</th><th>bash</th></tr></thead><tbody><tr><td>Equal to</td><td><code>if [ 1 \u2013eq 2 ]</code></td></tr><tr><td>Not equal to</td><td><code>if [ $a \u2013ne $b ]</code></td></tr><tr><td>Greater than</td><td><code>if [ $a \u2013gt $b ]</code></td></tr><tr><td>Greater than or equal to</td><td><code>if [ 1 \u2013ge $b ]</code></td></tr><tr><td>Less than</td><td><code>if [ $a \u2013lt 2 ]</code></td></tr><tr><td>Less than or equal to</td><td><code>if [ $a \u2013le $b ]</code></td></tr></tbody></table></div><div class="custom-container tip"><p class="custom-container-title">Integer Comparisons</p><table><thead><tr><th>Operation</th><th>bash</th></tr></thead><tbody><tr><td>Equal to</td><td><code>if [ $a == $b ]</code></td></tr><tr><td>Not equal to</td><td><code>if [ $a != $b ]</code></td></tr><tr><td>Zero length or null</td><td><code>if [ -z $a ]</code></td></tr><tr><td>Non zero length</td><td><code>if [ -n $a ]</code></td></tr></tbody></table></div><div class="custom-container tip"><p class="custom-container-title">Logical Operators</p><p>! (NOT)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> \u2013e <span class="token builtin class-name">test</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>&amp;&amp; (AND)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> test<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token builtin class-name">test</span> <span class="token punctuation">]</span> 
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token builtin class-name">test</span> <span class="token operator">&amp;&amp;</span> <span class="token parameter variable">-s</span> <span class="token builtin class-name">test</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token parameter variable">-e</span> <span class="token builtin class-name">test</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> \u2013z <span class="token builtin class-name">test</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>| (OR)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> test1 <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> test2 <span class="token punctuation">]</span> 
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> test1 <span class="token operator">||</span> <span class="token parameter variable">-f</span> test2 <span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">Loops</p><p><strong>for loop example</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">arg</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">4</span><span class="token variable">\`</span></span> 
<span class="token keyword">do</span> 
    <span class="token builtin class-name">echo</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>
    <span class="token function">touch</span> test.<span class="token variable">$arg</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>How to delete test files using a loop?</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">rm</span> test.<span class="token punctuation">[</span><span class="token number">1</span>-4<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>While loop example</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">read</span> counter
<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$counter</span> <span class="token parameter variable">-ge</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">do</span> <span class="token builtin class-name">let</span> counter--
    <span class="token builtin class-name">echo</span> <span class="token variable">$counter</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Until loop example</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">read</span> counter
<span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token variable">$counter</span> <span class="token parameter variable">-lt</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">do</span> <span class="token builtin class-name">let</span> counter--
    <span class="token builtin class-name">echo</span> <span class="token variable">$counter</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container danger"><p class="custom-container-title">Advanced text processing commands</p><ul><li>grep</li><li>sed</li><li>awk</li></ul></div><div class="custom-container info"><p class="custom-container-title">grep &amp; egrep</p><ul><li>grep: Unix utility that searches through either information piped to it or files.</li><li>egrep: extended grep, same as grep \u2013E</li><li>zgrep: compressed files.</li><li>Usage: <code>grep &lt;options&gt; &lt;search pattern&gt; &lt;files&gt;</code></li></ul><table><thead><tr><th>Option</th><th>Meaning</th></tr></thead><tbody><tr><td><code>-i</code></td><td>ignore case during search</td></tr><tr><td><code>-r,-R</code></td><td>search recursively</td></tr><tr><td><code>-v</code></td><td>invert match i.e. match everything except pattern</td></tr><tr><td><code>-l</code></td><td>list files that match pattern</td></tr><tr><td><code>-L</code></td><td>list files that do not match pattern</td></tr><tr><td><code>-n</code></td><td>prefix each line of output with the line number within its input file.</td></tr><tr><td><code>-A num</code></td><td>print num lines of trailing context after matching lines.</td></tr><tr><td><code>-B num</code></td><td>print num lines of leading context before matching lines.</td></tr></tbody></table></div>`,11),m={class:"custom-container tip"},b=s("p",{class:"custom-container-title"},"grep examples:",-1),v={href:"https://www.thegeekstuff.com/2011/10/grep-or-and-not-operators/",target:"_blank",rel:"noopener noreferrer"},g=e("Grep operator examples"),k=a(`<p>Search files NOT containing the word bash in current directory</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">bash</span> *
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Repeat above search using a case insensitive pattern match and print line number that matches the search pattern</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token parameter variable">-in</span> <span class="token function">bash</span> *
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Test file: <code>employee.txt</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> employee.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>100  Thomas  Manager    Sales       $5,000
200  Jason   Developer  Technology  $5,500
300  Raj     Sysadmin   Technology  $7,000
500  Randy   Manager    Sales       $6,000
</code></pre><p>grep OR</p><ol><li>Grep OR Using |</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token string">&#39;Man\\|Sales&#39;</span> employee.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Grep OR Using -E</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&quot;Man|Sales&quot;</span> employee.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Grep OR Using egrep</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">egrep</span> <span class="token string">&quot;Man|Sales&quot;</span> employee.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>100  Thomas  Manager    Sales       $5,000
500  Randy   Manager    Sales       $6,000
</code></pre><p>grep AND</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;Dev.*Tech&#39;</span> employee.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17),f=a('<div class="custom-container info"><p class="custom-container-title">sed</p><table><thead><tr><th>Flags</th><th>Operation</th><th>Command</th><th>Operation</th></tr></thead><tbody><tr><td>-e</td><td>combine multiple commands</td><td>s</td><td>substitution</td></tr><tr><td>-f</td><td>read commands from file</td><td>g</td><td>global replacement</td></tr><tr><td>-h</td><td>print help info</td><td>p</td><td>print</td></tr><tr><td>-n</td><td>disable print</td><td>i</td><td>ignore case</td></tr><tr><td>-V</td><td>print version info</td><td>d</td><td>delete</td></tr><tr><td>-r</td><td>use extended regex</td><td>G</td><td>add newline</td></tr><tr><td></td><td></td><td>w</td><td>write to file</td></tr><tr><td></td><td></td><td>x</td><td>exchange pattern with hold buffer</td></tr><tr><td></td><td></td><td>h</td><td>copy pattern to hold buffer</td></tr><tr><td></td><td></td><td>;</td><td>separate commands</td></tr></tbody></table></div>',1),x=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"sed examples"),s("p",null,[e("Test file: "),s("code",null,"hello.sh")]),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"cat"),e(` hello.sh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])]),s("pre",null,[s("code",null,`#!/bin/bash

# My First Script

echo "Hello World!"
`)]),s("p",null,[e("change the word "),s("code",null,"First"),e(" to "),s("code",null,"Second")]),s("ol",null,[s("li",null,"Add flag -e to carry out multiple matches.")]),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"cat"),e(" hello.sh "),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"sed"),e(),s("span",{class:"token parameter variable"},"-e"),e(),s("span",{class:"token string"},"'s/bash/tcsh/g'"),e(),s("span",{class:"token parameter variable"},"-e"),e(),s("span",{class:"token string"},"'s/First/Second/g'"),e(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])]),s("ol",{start:"2"},[s("li",null,"Alternatively")]),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sed"),e(),s("span",{class:"token string"},"'s/bash/tcsh/g; s/First/Second/g'"),e(` hello.sh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])]),s("pre",null,[s("code",null,`#!/bin/tcsh

# My Second Script

echo "Hello World!"
`)]),s("p",null,"The default delimiter is slash (/), can be changed"),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sed"),e(),s("span",{class:"token string"},"'s:/bin/bash:/bin/tcsh:g'"),e(` hello.sh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])]),s("pre",null,[s("code",null,`#!/bin/tcsh

# My First Script

echo "Hello World!"
`)]),s("p",null,"Delete blank lines from a file"),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sed"),e(),s("span",{class:"token string"},"'/^$/d'"),e(` hello.sh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])]),s("pre",null,[s("code",null,`#!/bin/bash
# My First Script
echo "Hello World!"
`)]),s("p",null,[e("Delete line "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),e(" through "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"m")]),s("annotation",{encoding:"application/x-tex"},"m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"m")])])]),e(" in a file")]),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sed"),e(),s("span",{class:"token string"},"'2,4d'"),e(` hello.sh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])]),s("pre",null,[s("code",null,`#!/bin/bash
echo "Hello World!"
`)]),s("p",null,[e("Insert a blank line below every line matches "),s("code",null,"pattern")]),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sed"),e(),s("span",{class:"token string"},"'/First/G'"),e(` hello.sh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])]),s("pre",null,[s("code",null,`#!/bin/bash

# My First Script


echo "Hello World!"
`)]),s("p",null,[e("Insert a blank line above and below every line matches "),s("code",null,"pattern")]),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sed"),e(),s("span",{class:"token string"},"'/First/{x;p;x;G}'"),e(` hello.sh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])]),s("p",null,"Actual result"),s("pre",null,`sed: 1: "/First/{x;p;x;G}": extra characters at the end of G command
`),s("p",null,"Expected result"),s("pre",null,`#!/bin/bash
# My First Script 
echo "Hello World!"
`),s("p",null,"Why?")],-1),y=a(`<div class="custom-container info"><p class="custom-container-title">awk Syntax</p><p><code>awk pattern {action} </code></p><ul><li>awk reads the file being processed line by line.</li><li>The entire content of each line is split into columns with space or tab as the delimiter.</li><li><code>$0</code> Print the entire line, use.</li><li><code>NR</code> #records (lines)</li><li><code>NF</code> #fields or columns in the current line.</li><li>By default the field delimiter is space or tab. To change the field delimiter use the <code>-F&lt;delimiter&gt;</code> command.</li></ul></div><div class="custom-container tip"><p class="custom-container-title">awk examples</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">uptime</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>11:02  up 115 days, 22:07, 1 user, load averages: 5.40 5.32 5.19
</code></pre><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">uptime</span> <span class="token operator">|</span> <span class="token function">awk</span> -F, <span class="token string">&#39;{print $1}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>11:02  up 115 days
</code></pre></div>`,2);function w(_,$){const n=c("ExternalLinkIcon");return i(),o("div",null,[s("p",null,[r,s("a",p,[u,t(n)])]),h,s("div",m,[b,s("p",null,[s("a",v,[g,t(n)])]),k]),f,x,y])}const F=l(d,[["render",w],["__file","shell_scripting.html.vue"]]);export{F as default};
